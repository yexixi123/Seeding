<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context-3.1.xsd
">
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.sending">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:annotation-config />

    <!-- 数据库配置文件位置 -->
    <context:property-placeholder location="classpath:properties/jdbc.properties"/>


    <!--数据库连接配置-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="filters" value="stat"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="10"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="1"/>
        <!-- 配置获取连接 等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="1"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>

        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!--<property name="maxOpenPreparedStatements" value="20"/>-->
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sending.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--swagger-ui config-->
    <bean class="com.sending.util.SwaggerConfig" />

    <!--sso-config-->
    <bean class="com.smart.mvc.config.ConfigUtils">
        <property name="fileEncoding" value="UTF-8" />
        <property name="locations">
            <list>

                <!--单点登录服务端参数配置 -->
                <value>classpath:sso.properties</value>
                <!--当前应用参数配置 -->
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <!-- 以下为Hessian和Dubbo提供Token验证和授权RPC服务，二选一即可，默认Hessian -->
    <!-- Hessian -->
    <bean id="authenticationRpcService" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
        <property name="serviceUrl" value="http://localhost:8080/rpc/authenticationRpcService" />
        <property name="serviceInterface" value="com.smart.sso.rpc.AuthenticationRpcService" />
    </bean>
</beans>